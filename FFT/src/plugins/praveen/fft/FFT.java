package plugins.praveen.fft;

import edu.emory.mathcs.jtransforms.fft.DoubleFFT_2D;
import icy.image.IcyBufferedImage;
import icy.sequence.Sequence;
import icy.type.DataType;
import icy.type.collection.array.Array1DUtil;
import plugins.adufour.ezplug.EzPlug;
import plugins.adufour.ezplug.EzVarSequence;
import plugins.adufour.ezplug.EzVarText;
import icy.gui.dialog.MessageDialog;

public class FFT extends EzPlug {

	EzVarSequence input = new EzVarSequence("Input");
	EzVarText	type_2D = new EzVarText("Type", new String[] { "2D", "3D" }, 0, false);
	EzVarText	scaled = new EzVarText("Scaling", new String[] { "Linear scale", "Log scale" }, 0, false);

	@Override
	protected void initialize() {
		// TODO Auto-generated by Icy4Eclipse
		super.addEzComponent(input);
		super.addEzComponent(type_2D);
		super.addEzComponent(scaled);
		super.setTimeDisplay(true);
	}

	@Override
	protected void execute() {
		// TODO Auto-generated by Icy4Eclipse

		Sequence sequence = input.getValue();

		if(type_2D.getValue()=="2D")		
			FFT_2D(sequence);	
		else
			MessageDialog.showDialog("FFT3D not implemented yet !");	
	}



	private IcyBufferedImage FFT_2D(Sequence sequence) 
	{
		// TODO Auto-generated method stub
		//sequence = sequence.convertToType(DataType.DOUBLE, true);
		int _w = sequence.getSizeX();
		int _h = sequence.getSizeY();
		int _z = sequence.getSizeZ();
		int wc = _w/2;
		int hc = _h/2;
		
		final DoubleFFT_2D fft = new DoubleFFT_2D(_w, _h);
		IcyBufferedImage fdata = new IcyBufferedImage(_w, _h, 2, DataType.DOUBLE);

		for(int k = 0; k < _z; k++)
		{
			double[] seq2d = Array1DUtil.arrayToDoubleArray(sequence.getDataCopyCXY(0, k), sequence.isSignedDataType());
			fft.complexForward(seq2d);//Does only on half the data. To get the full transform use realForwardFull
			fdata.beginUpdate();
			try
			{
				for(int x = 0; x < (wc+1); x++)
				{
					for(int y = 0; y < (hc+1); y++)
					{
						fdata.setDataAsDouble(x, y, 0, Math.sqrt(Math.pow(seq2d[((wc-x) + (hc-y) * _h)*2 + 0], 2)+Math.pow(seq2d[((wc-x) + (hc-y) * _h)*2 + 1], 2)));
					}
					for(int y = hc+1; y < _h; y++)
					{
						fdata.setDataAsDouble(x, y, 0, Math.sqrt(Math.pow(seq2d[((wc-x) + (_h+hc-y) * _h)*2 + 0], 2)+Math.pow(seq2d[((wc-x) + (_h+hc-y) * _h)*2 + 1], 2)));
					}

				}
				for(int x = (wc+1); x < _w; x++)
				{
					for(int y = 0; y < (hc+1); y++)
					{
						fdata.setDataAsDouble(x, y, 0, Math.sqrt(Math.pow(seq2d[((_w+wc-x) + (hc-y) * _h)*2 + 0], 2)+Math.pow(seq2d[((_w+wc-x) + (hc-y) * _h)*2 + 1], 2)));
					}
					for(int y = hc+1; y < _h; y++)
					{
						fdata.setDataAsDouble(x, y, 0, Math.sqrt(Math.pow(seq2d[((_w+wc-x) + (_h+hc-y) * _h)*2 + 0], 2)+Math.pow(seq2d[((_w+wc-x) + (_h+hc-y) * _h)*2 + 1], 2)));
					}
				}				

			}finally{
				fdata.endUpdate();
			}
		}
		addSequence(new Sequence(fdata));
		return fdata;
	}

	@Override
	public void clean() {
		// TODO Auto-generated by Icy4Eclipse
	}
}
